import{n as p}from"./compilerUtils-7f5a3043.js";import{h as m}from"./JSONSupport-acf2865c.js";import{f as c}from"./SpatialReference-428523ee.js";import{o as d}from"./zscale-d7e12601.js";import"./typedArrayUtil-2af43698.js";import"./aaBoundingBox-7242ce3e.js";import"./mathUtils-19b6edfc.js";import"./Extent-2b4578b8.js";import"./Polyline-013cde1f.js";import"./typeUtils-3056a943.js";import{y as f}from"./Field-be948aef.js";import{p as y,r as _}from"./featureConversionUtils-e62978d0.js";import{t as g}from"./pbfQueryUtils-06460449.js";import"./subclass-f7409b1b.js";import"./Error-21d1d076.js";import"./promiseUtils-1d963c7c.js";import"./time-0817624a.js";import"./jsonMap-5ba4a9c2.js";import"./request-a10d6950.js";import"./assets-6fd92e57.js";import"./cast-e7a2f9aa.js";import"./aaBoundingRect-aef00841.js";import"./Axis-30be7e73.js";import"./enumeration-4a4e87c4.js";import"./fieldType-4834e8bc.js";import"./jsonUtils-2c7f966c.js";import"./OptimizedFeature-0af09c7a.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./OptimizedGeometry-5ad221bf.js";import"./pbf-1d598563.js";let b=class{constructor(t,e,r){this.uid=t,this.geometry=e,this.attributes=r,this.visible=!0,this.objectId=null,this.centroid=null}};class P{constructor(){this.exceededTransferLimit=!1,this.features=[],this.fields=[],this.hasM=!1,this.hasZ=!1,this.geometryType=null,this.objectIdFieldName=null,this.globalIdFieldName=null,this.geometryProperties=null,this.geohashFieldName=null,this.spatialReference=null,this.transform=null}}function C(s,t,e,r){if(t!=null&&t.size&&e!=null&&s)for(const i in s){if(!t.has(i))continue;const o=s[i];typeof o=="string"&&o.length>e&&(r(i),s[i]="")}}function G(s,t){return t}function l(s,t,e,r){switch(e){case 0:return h(s,t+r,0);case 1:return s.originPosition==="lowerLeft"?h(s,t+r,1):M(s,t+r,1)}}function u(s,t,e,r){return e===2?h(s,t,2):l(s,t,e,r)}function A(s,t,e,r){return e===2?h(s,t,3):l(s,t,e,r)}function v(s,t,e,r){return e===3?h(s,t,3):u(s,t,e,r)}function h({translate:s,scale:t},e,r){return s[r]+e*t[r]}function M({translate:s,scale:t},e,r){return s[r]-e*t[r]}class T{constructor(t){this._options=t,this.geometryTypes=["point","multipoint","polyline","polygon"],this._previousCoordinate=[0,0],this._transform=null,this._applyTransform=G,this._lengths=[],this._currentLengthIndex=0,this._toAddInCurrentPath=0,this._vertexDimension=0,this._coordinateBuffer=null,this._coordinateBufferPtr=0,this._attributesConstructor=class{},this._missingAttributes=[]}get missingAttributes(){return this._missingAttributes}createFeatureResult(){return new P}finishFeatureResult(t){if(this._options.applyTransform&&(t.transform=null),this._attributesConstructor=class{},this._coordinateBuffer=null,this._lengths.length=0,!t.hasZ)return;const e=d(t.geometryType,this._options.sourceSpatialReference,t.spatialReference);if(e!=null)for(const r of t.features)e(r.geometry)}createSpatialReference(){return new c}addField(t,e){t.fields.push(f.fromJSON(e));const r=t.fields.map(i=>i.name);this._attributesConstructor=function(){for(const i of r)this[i]=null}}addFeature(t,e){const r=this._options.maxStringAttributeLength,i=this._options.maxStringAttributeFields;C(e.attributes,i,r,o=>{const n=e.attributes[t.objectIdFieldName];n!=null&&this._missingAttributes.push({objectId:n,attribute:o})}),t.features.push(e)}addQueryGeometry(t,e){const{queryGeometry:r,queryGeometryType:i}=e,o=y(r.clone(),r,!1,!1,this._transform),n=_(o,i,!1,!1);let a=null;switch(i){case"esriGeometryPoint":a="point";break;case"esriGeometryPolygon":a="polygon";break;case"esriGeometryPolyline":a="polyline";break;case"esriGeometryMultipoint":a="multipoint"}n.type=a,t.queryGeometryType=i,t.queryGeometry=n}prepareFeatures(t){switch(this._transform=t.transform??null,this._options.applyTransform&&t.transform&&(this._applyTransform=this._deriveApplyTransform(t)),this._vertexDimension=2,t.hasZ&&this._vertexDimension++,t.hasM&&this._vertexDimension++,t.geometryType){case"point":this.addCoordinate=(e,r,i)=>this.addCoordinatePoint(e,r,i),this.createGeometry=e=>this.createPointGeometry(e);break;case"polygon":this.addCoordinate=(e,r,i)=>this._addCoordinatePolygon(e,r,i),this.createGeometry=e=>this._createPolygonGeometry(e);break;case"polyline":this.addCoordinate=(e,r,i)=>this._addCoordinatePolyline(e,r,i),this.createGeometry=e=>this._createPolylineGeometry(e);break;case"multipoint":this.addCoordinate=(e,r,i)=>this._addCoordinateMultipoint(e,r,i),this.createGeometry=e=>this._createMultipointGeometry(e);break;case"mesh":case"extent":break;default:p(t.geometryType)}}createFeature(){return this._lengths.length=0,this._currentLengthIndex=0,this._previousCoordinate[0]=0,this._previousCoordinate[1]=0,new b(m(),null,new this._attributesConstructor)}allocateCoordinates(){const t=this._lengths.reduce((e,r)=>e+r,0);this._coordinateBuffer=new Float64Array(t*this._vertexDimension),this._coordinateBufferPtr=0}addLength(t,e){this._lengths.length===0&&(this._toAddInCurrentPath=e),this._lengths.push(e)}createPointGeometry(t){const e={type:"point",x:0,y:0,spatialReference:t.spatialReference,hasZ:!!t.hasZ,hasM:!!t.hasM};return e.hasZ&&(e.z=0),e.hasM&&(e.m=0),e}addCoordinatePoint(t,e,r){const i=this._transform?this._applyTransform(this._transform,e,r,0):e;if(i!=null)switch(r){case 0:t.x=i;break;case 1:t.y=i;break;case 2:t.hasZ?t.z=i:t.m=i;break;case 3:t.m=i}}_transformPathLikeValue(t,e){let r=0;return e<=1&&(r=this._previousCoordinate[e],this._previousCoordinate[e]+=t),this._transform?this._applyTransform(this._transform,t,e,r):t}_addCoordinatePolyline(t,e,r){this._dehydratedAddPointsCoordinate(t.paths,e,r)}_addCoordinatePolygon(t,e,r){this._dehydratedAddPointsCoordinate(t.rings,e,r)}_addCoordinateMultipoint(t,e,r){r===0&&t.points.push([]);const i=this._transformPathLikeValue(e,r);t.points[t.points.length-1].push(i)}_createPolygonGeometry(t){return{type:"polygon",rings:[[]],spatialReference:t.spatialReference,hasZ:!!t.hasZ,hasM:!!t.hasM}}_createPolylineGeometry(t){return{type:"polyline",paths:[[]],spatialReference:t.spatialReference,hasZ:!!t.hasZ,hasM:!!t.hasM}}_createMultipointGeometry(t){return{type:"multipoint",points:[],spatialReference:t.spatialReference,hasZ:!!t.hasZ,hasM:!!t.hasM}}_dehydratedAddPointsCoordinate(t,e,r){r===0&&this._toAddInCurrentPath--==0&&(t.push([]),this._toAddInCurrentPath=this._lengths[++this._currentLengthIndex]-1,this._previousCoordinate[0]=0,this._previousCoordinate[1]=0);const i=this._transformPathLikeValue(e,r),o=t[t.length-1],n=this._coordinateBuffer;if(n){if(r===0){const a=this._coordinateBufferPtr*Float64Array.BYTES_PER_ELEMENT;o.push(new Float64Array(n.buffer,a,this._vertexDimension))}n[this._coordinateBufferPtr++]=i}}_deriveApplyTransform(t){const{hasZ:e,hasM:r}=t;return e&&r?v:e?u:r?A:l}}class R{_parseFeatureQuery(t){var o;const e=new T(t.options),r=g(t.buffer,e),i={...r,spatialReference:(o=r.spatialReference)==null?void 0:o.toJSON(),fields:r.fields?r.fields.map(n=>n.toJSON()):void 0,missingAttributes:e.missingAttributes};return Promise.resolve(i)}}function ot(){return new R}export{ot as default};
