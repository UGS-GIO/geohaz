import{U as C}from"./request-a10d6950.js";import{d as Q}from"./Evented-b5127116.js";import{a as _,s as v}from"./Error-21d1d076.js";import{b as Z}from"./promiseUtils-1d963c7c.js";import{p as R}from"./jsonUtils-2c7f966c.js";import{v as I,G as A}from"./SpatialReference-428523ee.js";import{o as G,r as P,e as M,n as N,t as z}from"./featureConversionUtils-e62978d0.js";import{m as U}from"./FeatureStore-d7126e99.js";import{x as E,j as b}from"./timeSupport-57e57e41.js";import{$ as B}from"./QueryEngine-98332c44.js";import{I as J,N as L,E as H}from"./geojson-b47ee09c.js";import{o as V,a as W,i as K}from"./clientSideDefaults-1b55d85f.js";import{j as Y,p as T,d as w,f as F,y as O}from"./sourceUtils-141e6bda.js";import{Z as $}from"./FieldsIndex-9238b8b6.js";import{i as X}from"./fieldType-4834e8bc.js";import{H as ee,K as te}from"./fieldUtils-fcb2a714.js";import{i as ie}from"./date-7940da18.js";import"./typedArrayUtil-2af43698.js";import"./JSONSupport-acf2865c.js";import"./subclass-f7409b1b.js";import"./time-0817624a.js";import"./Extent-2b4578b8.js";import"./cast-e7a2f9aa.js";import"./Polyline-013cde1f.js";import"./aaBoundingRect-aef00841.js";import"./Axis-30be7e73.js";import"./mathUtils-19b6edfc.js";import"./jsonMap-5ba4a9c2.js";import"./assets-6fd92e57.js";import"./aaBoundingBox-7242ce3e.js";import"./OptimizedFeature-0af09c7a.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./OptimizedGeometry-5ad221bf.js";import"./BoundsStore-efd6e714.js";import"./PooledRBush-7b613e7a.js";import"./quickselect-fcce738b.js";import"./_commonjsHelpers-2f3e7994.js";import"./projection-41da473c.js";import"./SimpleObservable-ae589a25.js";import"./projectBuffer-af7b4ad9.js";import"./zscale-d7e12601.js";import"./normalizeUtils-059b11cb.js";import"./normalizeUtilsCommon-c4e9ddb1.js";import"./geometry-31b45acd.js";import"./typeUtils-3056a943.js";import"./utils-3234cfff.js";import"./utils-ed91a700.js";import"./json-48e3ea08.js";import"./LRUCache-000d0e19.js";import"./WhereClause-239b807b.js";import"./TimeOnly-e43464ca.js";import"./UnknownTimeZone-8ede07af.js";import"./datetime-7e00d9ef.js";import"./locale-bde6d0f6.js";import"./QueryEngineCapabilities-85c4f1d0.js";import"./heatmapUtils-7a838493.js";import"./screenUtils-7afeb41c.js";import"./vec42-a95eff2d.js";import"./vec4f64-430e4feb.js";import"./utils-0bd9b85f.js";import"./timeUtils-24502426.js";import"./utils-522ed121.js";import"./Basemap-09ab572b.js";import"./Collection-aa6ef54b.js";import"./collectionUtils-b6e30316.js";import"./Loadable-8a1ead8b.js";import"./Promise-ec74e14b.js";import"./loadAll-19f96669.js";import"./Portal-cb507469.js";import"./PortalItem-9d3416e3.js";import"./persistableUrlUtils-ca6bb38d.js";import"./messages-2d262041.js";import"./writeUtils-ef8a6958.js";import"./layerUtils-c805b05c.js";import"./mat4f32-1b45b54f.js";import"./mat4-a6ac6b0f.js";import"./utils-11762b6e.js";import"./ClassBreaksDefinition-be15ec21.js";import"./enumeration-4a4e87c4.js";import"./reactiveUtils-e7d9f86e.js";import"./signal-b060d75f.js";import"./RenderState-1d6218ee.js";import"./date-294ce3fb.js";import"./defaultsJSON-b087dd4d.js";import"./intl-fe039018.js";const re={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class vt{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const s=[],[i]=await Promise.all([e.url?this._fetch(t==null?void 0:t.signal):null,this._checkProjection(e.spatialReference)]),r=J(i,{geometryType:e.geometryType}),a=e.fields||r.fields||[],u=e.hasZ!=null?e.hasZ:r.hasZ,m=r.geometryType;let c=e.objectIdField||r.objectIdFieldName||"__OBJECTID";const h=e.spatialReference||I;let n=e.timeInfo;a===r.fields&&r.unknownFields.length>0&&s.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:r.unknownFields}});const p=new $(a);let l=p.get(c);l?(l.type!=="esriFieldTypeString"&&(l.type="esriFieldTypeOID"),l.editable=!1,l.nullable=!1,c=l.name):(l={alias:c,name:c,type:r.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},a.unshift(l));const y={};for(const o of a){if(o.name==null&&(o.name=o.alias),o.alias==null&&(o.alias=o.name),!o.name)throw new _("geojson-layer:invalid-field-name","field name is missing",{field:o});if(!X.jsonValues.includes(o.type))throw new _("geojson-layer:invalid-field-type",`invalid type for field "${o.name}"`,{field:o});if(o.name!==l.name){const g=ee(o);g!==void 0&&(y[o.name]=g)}o.length==null&&(o.length=te(o))}if(n){if(n.startTimeField){const o=p.get(n.startTimeField);o?(n.startTimeField=o.name,o.type="esriFieldTypeDate"):n.startTimeField=null}if(n.endTimeField){const o=p.get(n.endTimeField);o?(n.endTimeField=o.name,o.type="esriFieldTypeDate"):n.endTimeField=null}if(n.trackIdField){const o=p.get(n.trackIdField);o?n.trackIdField=o.name:(n.trackIdField=null,s.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:n}}))}n.startTimeField||n.endTimeField||(s.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:n}}),n=null)}const d=m?V(m):void 0,j=p.dateFields.length?{timeZoneIANA:ie}:null,f={warnings:s,featureErrors:[],layerDefinition:{...re,drawingInfo:d??void 0,templates:W(y),extent:void 0,geometryType:m,objectIdField:c,fields:a,hasZ:!!u,timeInfo:n,dateFieldsTimeReference:j}};this._queryEngine=new B({fieldsIndex:$.fromLayerJSON({fields:a,timeInfo:n,dateFieldsTimeReference:j}),geometryType:m,hasM:!1,hasZ:u,objectIdField:c,spatialReference:h,timeInfo:n,featureStore:new U({geometryType:m,hasM:!1,hasZ:u}),cacheSpatialQueries:!0});const q=this._queryEngine.fieldsIndex.requiredFields.indexOf(l);q>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(q,1),this._createDefaultAttributes=K(y,c);const x=await this._createFeatures(i);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,x);const k=this._normalizeFeatures(x,f.featureErrors);this._queryEngine.featureStore.addMany(k);const{fullExtent:D,timeExtent:S}=await this._queryEngine.fetchRecomputedExtents();if(f.layerDefinition.extent=D,S){const{start:o,end:g}=S;f.layerDefinition.timeInfo.timeExtent=[o,g]}return f}async applyEdits(e){const{spatialReference:t,geometryType:s}=this._queryEngine;return await Promise.all([Y(t,s),E(e.adds,t),E(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){var i;this._loadOptions.customParameters=e,(i=this._snapshotTask)==null||i.abort(),this._snapshotTask=Q(this._snapshotFeatures),this._snapshotTask.promise.then(r=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,r);const a=this._normalizeFeatures(r);a&&this._queryEngine.featureStore.addMany(a)},r=>{this._queryEngine.featureStore.clear(),Z(r)||v.getLogger("esri.layers.GeoJSONLayer").error(new _("geojson-layer:refresh","An error occurred during refresh",{error:r}))}),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:s}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:s}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:s,objectIdField:i}=this._queryEngine,r=L(e,{geometryType:t,hasZ:s,objectIdField:i});if(!A(this._queryEngine.spatialReference,I))for(const a of r)a.geometry!=null&&(a.geometry=G(b(P(a.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),I,this._queryEngine.spatialReference)));return r}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:s}=this._loadOptions,i=(await C(t,{responseType:"json",query:{...s},signal:e})).data;return H(i),i}_normalizeFeatures(e,t){const{objectIdField:s,fieldsIndex:i}=this._queryEngine,r=[];for(const a of e){const u=this._createDefaultAttributes(),m=T(i,u,a.attributes,!0);m?t==null||t.push(m):(this._assignObjectId(u,a.attributes,!0),a.attributes=u,a.objectId=u[s],r.push(a))}return r}async _applyEdits(e){const{adds:t,updates:s,deletes:i}=e,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t!=null&&t.length&&this._applyAddEdits(r,t),s!=null&&s.length&&this._applyUpdateEdits(r,s),i==null?void 0:i.length){for(const m of i)r.deleteResults.push(w(m));this._queryEngine.featureStore.removeManyById(i)}const{fullExtent:a,timeExtent:u}=await this._queryEngine.fetchRecomputedExtents();return{extent:a,timeExtent:u,featureEditResults:r}}_applyAddEdits(e,t){const{addResults:s}=e,{geometryType:i,hasM:r,hasZ:a,objectIdField:u,spatialReference:m,featureStore:c,fieldsIndex:h}=this._queryEngine,n=[];for(const p of t){if(p.geometry&&i!==R(p.geometry)){s.push(F("Incorrect geometry type."));continue}const l=this._createDefaultAttributes(),y=T(h,l,p.attributes);if(y)s.push(y);else{if(this._assignObjectId(l,p.attributes),p.attributes=l,p.uid!=null){const d=p.attributes[u];e.uidToObjectId[p.uid]=d}if(p.geometry!=null){const d=p.geometry.spatialReference??m;p.geometry=b(O(p.geometry,d),d,m)}n.push(p),s.push(w(p.attributes[u]))}}c.addMany(M([],n,i,a,r,u))}_applyUpdateEdits({updateResults:e},t){const{geometryType:s,hasM:i,hasZ:r,objectIdField:a,spatialReference:u,featureStore:m,fieldsIndex:c}=this._queryEngine;for(const h of t){const{attributes:n,geometry:p}=h,l=n==null?void 0:n[a];if(l==null){e.push(F(`Identifier field ${a} missing`));continue}if(!m.has(l)){e.push(F(`Feature with object id ${l} missing`));continue}const y=N(m.getFeature(l),s,r,i);if(p!=null){if(s!==R(p)){e.push(F("Incorrect geometry type."));continue}const d=p.spatialReference??u;y.geometry=b(O(p,d),d,u)}if(n){const d=T(c,y.attributes,n);if(d){e.push(d);continue}}m.add(z(y,s,r,i,a)),e.push(w(l))}}_createObjectIdGenerator(e,t){const s=e.fieldsIndex.get(e.objectIdField);if(s.type==="esriFieldTypeString")return()=>s.name+"-"+Date.now().toString(16);let i=Number.NEGATIVE_INFINITY;for(const r of t)r.objectId&&(i=Math.max(i,r.objectId));return i=Math.max(0,i)+1,()=>i++}_assignObjectId(e,t,s=!1){const i=this._queryEngine.objectIdField;e[i]=s&&i in t?t[i]:this._objectIdGenerator()}async _checkProjection(e){try{await E(I,e)}catch{throw new _("geojson-layer","Projection not supported")}}}export{vt as default};
