import{c as a,a as p}from"./Error-21d1d076.js";import{Q as l}from"./Portal-cb507469.js";import{p as c,n as s}from"./project-44b24f84.js";import"./typedArrayUtil-2af43698.js";import"./request-a10d6950.js";import"./JSONSupport-acf2865c.js";import"./subclass-f7409b1b.js";import"./promiseUtils-1d963c7c.js";import"./time-0817624a.js";import"./Loadable-8a1ead8b.js";import"./Promise-ec74e14b.js";import"./Extent-2b4578b8.js";import"./SpatialReference-428523ee.js";import"./jsonMap-5ba4a9c2.js";import"./assets-6fd92e57.js";import"./cast-e7a2f9aa.js";import"./locale-bde6d0f6.js";import"./jsonUtils-2c7f966c.js";import"./Polyline-013cde1f.js";import"./aaBoundingRect-aef00841.js";import"./Axis-30be7e73.js";import"./mathUtils-19b6edfc.js";import"./utils-3234cfff.js";import"./utils-ed91a700.js";async function f(r=null,m){var o,t;if(a.geometryServiceUrl)return a.geometryServiceUrl;if(!r)throw new p("internal:geometry-service-url-not-configured");let e;e="portal"in r?r.portal||l.getDefault():r,await e.load({signal:m});const i=(t=(o=e.helperServices)==null?void 0:o.geometry)==null?void 0:t.url;if(!i)throw new p("internal:geometry-service-url-not-configured");return i}async function E(r,m,e=null,i){const o=await f(e,i),t=new c;t.geometries=[r],t.outSpatialReference=m;const n=await s(o,t,{signal:i});if(n&&Array.isArray(n)&&n.length===1)return n[0];throw new p("internal:geometry-service-projection-failed")}export{f as getGeometryServiceURL,E as projectGeometry};
