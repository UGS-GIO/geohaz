import{f as d}from"./utils-3234cfff.js";import{U as f}from"./request-a10d6950.js";import{g as y}from"./SpatialReference-428523ee.js";import{t as j}from"./urlUtils-6a004888.js";import{d as R}from"./FeatureSet-32e85c3a.js";import u from"./RelationshipQuery-722111d3.js";import"./Error-21d1d076.js";import"./typedArrayUtil-2af43698.js";import"./JSONSupport-acf2865c.js";import"./subclass-f7409b1b.js";import"./promiseUtils-1d963c7c.js";import"./time-0817624a.js";import"./jsonMap-5ba4a9c2.js";import"./assets-6fd92e57.js";import"./geometry-31b45acd.js";import"./Extent-2b4578b8.js";import"./cast-e7a2f9aa.js";import"./Polyline-013cde1f.js";import"./aaBoundingRect-aef00841.js";import"./Axis-30be7e73.js";import"./mathUtils-19b6edfc.js";import"./typeUtils-3056a943.js";import"./Graphic-f1881791.js";import"./PopupTemplate-18f22683.js";import"./Clonable-b71fa929.js";import"./Collection-aa6ef54b.js";import"./Evented-b5127116.js";import"./SimpleObservable-ae589a25.js";import"./fieldUtils-fcb2a714.js";import"./intl-fe039018.js";import"./date-7940da18.js";import"./locale-bde6d0f6.js";import"./datetime-7e00d9ef.js";import"./messages-2d262041.js";import"./enumeration-4a4e87c4.js";import"./Color-e1a6dfab.js";import"./colorUtils-ac6863dc.js";import"./Identifiable-1430bdc2.js";import"./symbols-b3e075ad.js";import"./TextSymbol-53669eb2.js";import"./screenUtils-7afeb41c.js";import"./opacityUtils-f0a081b4.js";import"./symbolLayerUtils3D-5b91ffd6.js";import"./aaBoundingBox-7242ce3e.js";import"./persistableUrlUtils-ca6bb38d.js";import"./collectionUtils-b6e30316.js";import"./Portal-cb507469.js";import"./Loadable-8a1ead8b.js";import"./Promise-ec74e14b.js";import"./reactiveUtils-e7d9f86e.js";import"./jsonUtils-2c7f966c.js";import"./Field-be948aef.js";import"./fieldType-4834e8bc.js";import"./DataLayerSource-62d0bfcf.js";function F(e,o){const t=e.toJSON();return t.objectIds&&(t.objectIds=t.objectIds.join(",")),t.orderByFields&&(t.orderByFields=t.orderByFields.join(",")),t.outFields&&!(o!=null&&o.returnCountOnly)?t.outFields.includes("*")?t.outFields="*":t.outFields=t.outFields.join(","):delete t.outFields,t.outSR&&(t.outSR=y(t.outSR)),t.dynamicDataSource&&(t.layer=JSON.stringify({source:t.dynamicDataSource}),delete t.dynamicDataSource),t}async function b(e,o,t){const i=await l(e,o,t),r=i.data,p=r.geometryType,m=r.spatialReference,n={};for(const a of r.relatedRecordGroups){const s={fields:void 0,objectIdFieldName:void 0,geometryType:p,spatialReference:m,hasZ:!!r.hasZ,hasM:!!r.hasM,features:a.relatedRecords};if(a.objectId!=null)n[a.objectId]=s;else for(const c of Object.keys(a))c!=="relatedRecords"&&(n[a[c]]=s)}return{...i,data:n}}async function h(e,o,t){const i=await l(e,o,t,{returnCountOnly:!0}),r=i.data,p={};for(const m of r.relatedRecordGroups)m.objectId!=null&&(p[m.objectId]=m.count);return{...i,data:p}}async function l(e,o,t={},i){const r=j({...e.query,f:"json",...i,...F(o,i)});return f(e.path+"/queryRelatedRecords",{...t,query:{...t.query,...r}})}async function St(e,o,t){o=u.from(o);const i=d(e);return b(i,o,t).then(r=>{const p=r.data,m={};return Object.keys(p).forEach(n=>m[n]=R.fromJSON(p[n])),m})}async function It(e,o,t){o=u.from(o);const i=d(e);return h(i,o,{...t}).then(r=>r.data)}export{St as executeRelationshipQuery,It as executeRelationshipQueryForCount};
