import"./geometry-31b45acd.js";import{s as n}from"./projection-41da473c.js";import{u as i,f as l,W as c,E as p,a as f,D as u,R as S,b as d,s as x}from"./dataUtils-a5d9e31f.js";import{m as O,S as y,L as h,h as J}from"./RasterSymbolizer-04295272.js";import{R as N,i as B}from"./utils-5786019d.js";import{M as P,T as b,e as k}from"./rasterProjectionHelper-0d922734.js";import{M as m,x as g}from"./Extent-2b4578b8.js";import"./subclass-f7409b1b.js";import"./typedArrayUtil-2af43698.js";import"./Error-21d1d076.js";import"./promiseUtils-1d963c7c.js";import"./Polyline-013cde1f.js";import"./JSONSupport-acf2865c.js";import"./time-0817624a.js";import"./SpatialReference-428523ee.js";import"./jsonMap-5ba4a9c2.js";import"./request-a10d6950.js";import"./assets-6fd92e57.js";import"./aaBoundingRect-aef00841.js";import"./Axis-30be7e73.js";import"./mathUtils-19b6edfc.js";import"./typeUtils-3056a943.js";import"./SimpleObservable-ae589a25.js";import"./projectBuffer-af7b4ad9.js";import"./zscale-d7e12601.js";import"./cast-e7a2f9aa.js";import"./_commonjsHelpers-2f3e7994.js";import"./colorUtils-f660fd36.js";import"./Color-e1a6dfab.js";import"./colorUtils-ac6863dc.js";import"./vec42-a95eff2d.js";import"./vec4f64-430e4feb.js";import"./enumeration-4a4e87c4.js";import"./jsonUtils-2c7f966c.js";import"./colorRamps-bef5e122.js";class lt{convertVectorFieldData(t){const e=i.fromJSON(t.pixelBlock),o=l(e,t.type);return Promise.resolve(o!=null?o.toJSON():null)}computeStatisticsHistograms(t){const e=i.fromJSON(t.pixelBlock),o=O(e);return Promise.resolve(o)}async decode(t){const e=await y(t.data,t.options);return e&&e.toJSON()}symbolize(t){t.pixelBlock=i.fromJSON(t.pixelBlock),t.extent=t.extent?m.fromJSON(t.extent):null;const e=this.symbolizer.symbolize(t);return Promise.resolve(e!=null?e.toJSON():null)}async updateSymbolizer(t){var e;this.symbolizer=h.fromJSON(t.symbolizerJSON),t.histograms&&((e=this.symbolizer)==null?void 0:e.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=N(t.rasterFunctionJSON)}async process(t){var o;const e=this.rasterFunction.process({extent:m.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map(r=>r!=null?i.fromJSON(r):null),primaryPixelSizes:(o=t.primaryPixelSizes)==null?void 0:o.map(r=>r!=null?g.fromJSON(r):null),primaryRasterIds:t.primaryRasterIds});return e!=null?e.toJSON():null}stretch(t){const e=this.symbolizer.simpleStretch(i.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(e==null?void 0:e.toJSON())}estimateStatisticsHistograms(t){const e=J(i.fromJSON(t.srcPixelBlock));return Promise.resolve(e)}split(t){const e=c(i.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel??0,t.useBilinear===!1);return e&&e.forEach((o,r)=>{e.set(r,o==null?void 0:o.toJSON())}),Promise.resolve(e)}clipTile(t){const e=i.fromJSON(t.pixelBlock),o=p({...t,pixelBlock:e});return Promise.resolve(o==null?void 0:o.toJSON())}async mosaicAndTransform(t){const e=t.srcPixelBlocks.map(a=>a?new i(a):null),o=f(e,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let r,s=o;return t.coefs&&(s=u(o,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(r=S(t.destDimension,t.gcsGrid),s=d(s,t.isUV?"vector-uv":"vector-magdir",r)),{pixelBlock:s==null?void 0:s.toJSON(),localNorthDirections:r}}async createFlowMesh(t,e){const o={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:r,indexData:s}=await x(t.meshType,t.simulationSettings,o,e.signal);return{result:{vertexBuffer:r.buffer,indexBuffer:s.buffer},transferList:[r.buffer,s.buffer]}}async getProjectionOffsetGrid(t){const e=m.fromJSON(t.projectedExtent),o=m.fromJSON(t.srcBufferExtent);let r=null;t.datumTransformationSteps&&(r=new n({steps:t.datumTransformationSteps})),(t.includeGCSGrid||P(e.spatialReference,o.spatialReference,r))&&await b();const s=t.rasterTransform?B(t.rasterTransform):null;return k({...t,projectedExtent:e,srcBufferExtent:o,datumTransformation:r,rasterTransform:s})}}export{lt as default};
