import{e as l,c as V,d as S,N as z,a as T}from"./subclass-f7409b1b.js";import{w as $}from"./symbols-b3e075ad.js";import{s as N}from"./jsonMap-5ba4a9c2.js";import{s as m,b as d}from"./Error-21d1d076.js";import{y as n,f as _}from"./JSONSupport-acf2865c.js";import{s as C}from"./cast-e7a2f9aa.js";import{o as M}from"./enumeration-4a4e87c4.js";import{o as j}from"./Extent-2b4578b8.js";import{r as O}from"./SpatialReference-428523ee.js";import{i as I,h as L,w as B}from"./fieldUtils-fcb2a714.js";import{n as R,v as A,m as q,y as H,p as P}from"./UniqueValueRenderer-983c9a3e.js";import"./typedArrayUtil-2af43698.js";import{p as G}from"./ColorStop-6cee3909.js";var v;let u=v=class extends _{constructor(e){super(e),this.description=null,this.label=null,this.minValue=null,this.maxValue=0,this.symbol=null}clone(){return new v({description:this.description,label:this.label,minValue:this.minValue,maxValue:this.maxValue,symbol:this.symbol?this.symbol.clone():null})}getMeshHash(){const e=JSON.stringify(this.symbol);return`${this.minValue}.${this.maxValue}.${e}`}};l([n({type:String,json:{write:!0}})],u.prototype,"description",void 0),l([n({type:String,json:{write:!0}})],u.prototype,"label",void 0),l([n({type:Number,json:{read:{source:"classMinValue"},write:{target:"classMinValue"}}})],u.prototype,"minValue",void 0),l([n({type:Number,json:{read:{source:"classMaxValue"},write:{target:"classMaxValue"}}})],u.prototype,"maxValue",void 0),l([n(R)],u.prototype,"symbol",void 0),u=v=l([V("esri.renderers.support.ClassBreakInfo")],u);const b=u;var k;const w="log",y="percent-of-total",g="field",f=new N({esriNormalizeByLog:w,esriNormalizeByPercentOfTotal:y,esriNormalizeByField:g}),J=S(b);let r=k=class extends A(P){constructor(e){super(e),this._compiledValueExpression={valueExpression:null,compiledFunction:null},this.backgroundFillSymbol=null,this.classBreakInfos=null,this.defaultLabel=null,this.defaultSymbol=null,this.field=null,this.isMaxInclusive=!0,this.legendOptions=null,this.normalizationField=null,this.normalizationTotal=null,this.type="class-breaks",this.valueExpression=null,this.valueExpressionTitle=null,this._set("classBreakInfos",[])}readClassBreakInfos(e,t,s){if(!Array.isArray(e))return;let i=t.minValue;return e.map(a=>{const o=new b;return o.read(a,s),o.minValue==null&&(o.minValue=i),o.maxValue==null&&(o.maxValue=o.minValue),i=o.maxValue,o})}writeClassBreakInfos(e,t,s,i){const a=e.map(o=>o.write({},i));this._areClassBreaksConsecutive()&&a.forEach(o=>delete o.classMinValue),t[s]=a}castField(e){return e==null?e:typeof e=="function"?(m.getLogger(this).error(".field: field must be a string value"),null):z(e)}get minValue(){return this.classBreakInfos&&this.classBreakInfos[0]&&this.classBreakInfos[0].minValue||0}get normalizationType(){let e=this._get("normalizationType");const t=!!this.normalizationField,s=this.normalizationTotal!=null;return t||s?(e=t&&g||s&&y||null,t&&s&&m.getLogger(this).warn("warning: both normalizationField and normalizationTotal are set!")):e!==g&&e!==y||(e=null),e}set normalizationType(e){this._set("normalizationType",e)}addClassBreakInfo(e,t,s){let i=null;i=typeof e=="number"?new b({minValue:e,maxValue:t,symbol:$(s)}):J(d(e)),this.classBreakInfos.push(i),this.classBreakInfos.length===1&&this.notifyChange("minValue")}removeClassBreakInfo(e,t){const s=this.classBreakInfos.length;for(let i=0;i<s;i++){const a=[this.classBreakInfos[i].minValue,this.classBreakInfos[i].maxValue];if(a[0]===e&&a[1]===t){this.classBreakInfos.splice(i,1);break}}}getBreakIndex(e,t){return this.valueExpression&&(t==null?void 0:t.arcade)==null&&m.getLogger(this).warn(""),this.valueExpression?this._getBreakIndexForExpression(e,t):this._getBreakIndexForField(e)}async getClassBreakInfo(e,t){let s=t;this.valueExpression&&(t==null?void 0:t.arcade)==null&&(s={...s,arcade:await I()});const i=this.getBreakIndex(e,s);return i!==-1?this.classBreakInfos[i]:null}getSymbol(e,t){if(this.valueExpression&&(t==null?void 0:t.arcade)==null)return void m.getLogger(this).error("#getSymbol()","Please use getSymbolAsync if valueExpression is used");const s=this.getBreakIndex(e,t);return s>-1?this.classBreakInfos[s].symbol:this.defaultSymbol}async getSymbolAsync(e,t){let s=t;if(this.valueExpression&&(t==null?void 0:t.arcade)==null){const a=await I(),{arcadeUtils:o}=a;o.hasGeometryOperations(this.valueExpression)&&await o.enableGeometryOperations(),s={...s,arcade:a}}const i=this.getBreakIndex(e,s);return i>-1?this.classBreakInfos[i].symbol:this.defaultSymbol}getSymbols(){const e=[];return this.classBreakInfos.forEach(t=>{t.symbol&&e.push(t.symbol)}),this.defaultSymbol&&e.push(this.defaultSymbol),e}getAttributeHash(){return this.visualVariables&&this.visualVariables.reduce((e,t)=>e+t.getAttributeHash(),"")}getMeshHash(){const e=JSON.stringify(this.backgroundFillSymbol),t=JSON.stringify(this.defaultSymbol),s=`${this.normalizationField}.${this.normalizationType}.${this.normalizationTotal}`;return`${e}.${t}.${this.classBreakInfos.reduce((i,a)=>i+a.getMeshHash(),"")}.${s}.${this.field}.${this.valueExpression}`}get arcadeRequired(){return this.arcadeRequiredForVisualVariables||!!this.valueExpression}clone(){var e,t;return new k({field:this.field,backgroundFillSymbol:(e=this.backgroundFillSymbol)==null?void 0:e.clone(),defaultLabel:this.defaultLabel,defaultSymbol:(t=this.defaultSymbol)==null?void 0:t.clone(),valueExpression:this.valueExpression,valueExpressionTitle:this.valueExpressionTitle,classBreakInfos:d(this.classBreakInfos),isMaxInclusive:this.isMaxInclusive,normalizationField:this.normalizationField,normalizationTotal:this.normalizationTotal,normalizationType:this.normalizationType,visualVariables:d(this.visualVariables),legendOptions:d(this.legendOptions),authoringInfo:this.authoringInfo&&this.authoringInfo.clone()})}async collectRequiredFields(e,t){const s=[this.collectVVRequiredFields(e,t),this.collectSymbolFields(e,t)];await Promise.all(s)}async collectSymbolFields(e,t){const s=[...this.getSymbols().map(i=>i.collectRequiredFields(e,t)),L(e,t,this.valueExpression)];B(e,t,this.field),B(e,t,this.normalizationField),await Promise.all(s)}_getBreakIndexForExpression(e,t){const{viewingMode:s,scale:i,spatialReference:a,arcade:o,timeZone:p}=t??{},{valueExpression:x}=this;let h=this._compiledValueExpression.valueExpression===x?this._compiledValueExpression.compiledFunction:null;const c=o.arcadeUtils;if(!h){const E=c.createSyntaxTree(x);h=c.createFunction(E),this._compiledValueExpression.compiledFunction=h}this._compiledValueExpression.valueExpression=x;const F=c.executeFunction(h,c.createExecContext(e,c.getViewInfo({viewingMode:s,scale:i,spatialReference:a}),p));return this._getBreakIndexfromInfos(F)}_getBreakIndexForField(e){const t=this.field,s=e.attributes,i=this.normalizationType;let a=parseFloat(s[t]);if(i){const o=this.normalizationTotal,p=parseFloat(this.normalizationField?s[this.normalizationField]:void 0);if(i===w)a=Math.log(a)*Math.LOG10E;else if(i!==y||o==null||isNaN(o)){if(i===g&&!isNaN(p)){if(isNaN(a)||isNaN(p))return-1;a/=p}}else a=a/o*100}return this._getBreakIndexfromInfos(a)}_getBreakIndexfromInfos(e){const t=this.isMaxInclusive;if(e!=null&&typeof e=="number"&&!isNaN(e))for(let s=0;s<this.classBreakInfos.length;s++){const i=[this.classBreakInfos[s].minValue,this.classBreakInfos[s].maxValue];if(i[0]<=e&&(t?e<=i[1]:e<i[1]))return s}return-1}_areClassBreaksConsecutive(){const e=this.classBreakInfos,t=e.length;for(let s=1;s<t;s++)if(e[s-1].maxValue!==e[s].minValue)return!1;return!0}};l([n(q)],r.prototype,"backgroundFillSymbol",void 0),l([n({type:[b]})],r.prototype,"classBreakInfos",void 0),l([j("classBreakInfos")],r.prototype,"readClassBreakInfos",null),l([O("classBreakInfos")],r.prototype,"writeClassBreakInfos",null),l([n({type:String,json:{write:!0}})],r.prototype,"defaultLabel",void 0),l([n(H)],r.prototype,"defaultSymbol",void 0),l([n({type:String,json:{write:!0}})],r.prototype,"field",void 0),l([C("field")],r.prototype,"castField",null),l([n({type:Boolean})],r.prototype,"isMaxInclusive",void 0),l([n({type:G,json:{write:!0}})],r.prototype,"legendOptions",void 0),l([n({type:Number,readOnly:!0,value:null,json:{read:!1,write:{overridePolicy(){return this.classBreakInfos.length!==0&&this._areClassBreaksConsecutive()?{enabled:!0}:{enabled:!1}}}}})],r.prototype,"minValue",null),l([n({type:String,json:{write:!0}})],r.prototype,"normalizationField",void 0),l([n({type:Number,cast:e=>T(e),json:{write:!0}})],r.prototype,"normalizationTotal",void 0),l([n({type:f.apiValues,value:null,json:{type:f.jsonValues,read:f.read,write:f.write}})],r.prototype,"normalizationType",null),l([M({classBreaks:"class-breaks"})],r.prototype,"type",void 0),l([n({type:String,json:{write:!0}})],r.prototype,"valueExpression",void 0),l([n({type:String,json:{write:!0}})],r.prototype,"valueExpressionTitle",void 0),r=k=l([V("esri.renderers.ClassBreaksRenderer")],r);const ae=r;export{b as a,ae as w};
