import{G as t}from"./geometryEngineBase-77e94ca5.js";import{hydratedAdapter as r}from"./hydrated-1443544c.js";import"./_commonjsHelpers-2f3e7994.js";import"./Extent-2b4578b8.js";import"./subclass-f7409b1b.js";import"./typedArrayUtil-2af43698.js";import"./Error-21d1d076.js";import"./promiseUtils-1d963c7c.js";import"./JSONSupport-acf2865c.js";import"./time-0817624a.js";import"./SpatialReference-428523ee.js";import"./jsonMap-5ba4a9c2.js";import"./request-a10d6950.js";import"./assets-6fd92e57.js";import"./cast-e7a2f9aa.js";import"./Polyline-013cde1f.js";import"./aaBoundingRect-aef00841.js";import"./Axis-30be7e73.js";import"./mathUtils-19b6edfc.js";function i(e){return Array.isArray(e)?e[0].spatialReference:e&&e.spatialReference}function I(e){return t.extendedSpatialReferenceInfo(e)}function J(e,n){return t.clip(r,i(e),e,n)}function N(e,n){return t.cut(r,i(e),e,n)}function O(e,n){return t.contains(r,i(e),e,n)}function b(e,n){return t.crosses(r,i(e),e,n)}function j(e,n,o){return t.distance(r,i(e),e,n,o)}function q(e,n){return t.equals(r,i(e),e,n)}function B(e,n){return t.intersects(r,i(e),e,n)}function C(e,n){return t.touches(r,i(e),e,n)}function E(e,n){return t.within(r,i(e),e,n)}function P(e,n){return t.disjoint(r,i(e),e,n)}function G(e,n){return t.overlaps(r,i(e),e,n)}function $(e,n,o){return t.relate(r,i(e),e,n,o)}function k(e){return t.isSimple(r,i(e),e)}function F(e){return t.simplify(r,i(e),e)}function K(e,n=!1){return t.convexHull(r,i(e),e,n)}function M(e,n){return t.difference(r,i(e),e,n)}function Q(e,n){return t.symmetricDifference(r,i(e),e,n)}function U(e,n){return t.intersect(r,i(e),e,n)}function W(e,n=null){return t.union(r,i(e),e,n)}function X(e,n,o,a,s,u){return t.offset(r,i(e),e,n,o,a,s,u)}function Y(e,n,o,a=!1){return t.buffer(r,i(e),e,n,o,a)}function Z(e,n,o,a,s,u){return t.geodesicBuffer(r,i(e),e,n,o,a,s,u)}function _(e,n,o=!0){return t.nearestCoordinate(r,i(e),e,n,o)}function ee(e,n){return t.nearestVertex(r,i(e),e,n)}function ne(e,n,o,a){return t.nearestVertices(r,i(e),e,n,o,a)}function f(e){var n;return"xmin"in e?"center"in e?e.center:null:"x"in e?e:"extent"in e?((n=e.extent)==null?void 0:n.center)??null:null}function te(e,n,o){if(e==null)throw new c;const a=e.spatialReference;if((o=o??f(e))==null)throw new c;const s=e.constructor.fromJSON(t.rotate(e,n,o));return s.spatialReference=a,s}function re(e,n){if(e==null)throw new c;const o=e.spatialReference;if((n=n??f(e))==null)throw new c;const a=e.constructor.fromJSON(t.flipHorizontal(e,n));return a.spatialReference=o,a}function ie(e,n){if(e==null)throw new c;const o=e.spatialReference;if((n=n??f(e))==null)throw new c;const a=e.constructor.fromJSON(t.flipVertical(e,n));return a.spatialReference=o,a}function oe(e,n,o,a){return t.generalize(r,i(e),e,n,o,a)}function ae(e,n,o){return t.densify(r,i(e),e,n,o)}function se(e,n,o,a=0){return t.geodesicDensify(r,i(e),e,n,o,a)}function ce(e,n){return t.planarArea(r,i(e),e,n)}function ue(e,n){return t.planarLength(r,i(e),e,n)}function fe(e,n,o){return t.geodesicArea(r,i(e),e,n,o)}function le(e,n,o){return t.geodesicLength(r,i(e),e,n,o)}function pe(e,n){return t.intersectLinesToPoints(r,i(e),e,n)}function me(e,n){t.changeDefaultSpatialReferenceTolerance(e,n)}function de(e){t.clearDefaultSpatialReferenceTolerance(e)}class c extends Error{constructor(){super("Illegal Argument Exception")}}export{Y as buffer,me as changeDefaultSpatialReferenceTolerance,de as clearDefaultSpatialReferenceTolerance,J as clip,O as contains,K as convexHull,b as crosses,N as cut,ae as densify,M as difference,P as disjoint,j as distance,q as equals,I as extendedSpatialReferenceInfo,re as flipHorizontal,ie as flipVertical,oe as generalize,fe as geodesicArea,Z as geodesicBuffer,se as geodesicDensify,le as geodesicLength,U as intersect,pe as intersectLinesToPoints,B as intersects,k as isSimple,_ as nearestCoordinate,ee as nearestVertex,ne as nearestVertices,X as offset,G as overlaps,ce as planarArea,ue as planarLength,$ as relate,te as rotate,F as simplify,Q as symmetricDifference,C as touches,W as union,E as within};
