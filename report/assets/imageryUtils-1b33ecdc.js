import{$ as l,j as y}from"./utils-df330680.js";import{l as n,a as c,f as a,i as u}from"./portalItemUtils-8aceb0b8.js";import"./Error-21d1d076.js";import"./typedArrayUtil-2af43698.js";import"./originUtils-cfe4feaf.js";import"./multiOriginJSONSupportUtils-c978f4c3.js";import"./Portal-cb507469.js";import"./request-a10d6950.js";import"./JSONSupport-acf2865c.js";import"./subclass-f7409b1b.js";import"./promiseUtils-1d963c7c.js";import"./time-0817624a.js";import"./Loadable-8a1ead8b.js";import"./Promise-ec74e14b.js";import"./Extent-2b4578b8.js";import"./SpatialReference-428523ee.js";import"./jsonMap-5ba4a9c2.js";import"./assets-6fd92e57.js";import"./cast-e7a2f9aa.js";import"./locale-bde6d0f6.js";import"./PortalItem-9d3416e3.js";import"./persistableUrlUtils-ca6bb38d.js";import"./jsonContext-70ccb9b3.js";import"./saveAPIKeyUtils-7fbece8f.js";import"./saveUtils-534df74b.js";import"./projection-41da473c.js";import"./SimpleObservable-ae589a25.js";import"./mathUtils-19b6edfc.js";import"./Polyline-013cde1f.js";import"./aaBoundingRect-aef00841.js";import"./Axis-30be7e73.js";import"./projectBuffer-af7b4ad9.js";import"./zscale-d7e12601.js";const m="Image Service",g="imagery-layer-save",v="imagery-layer-save-as",f="imagery-tile-layer-save",d="imagery-tile-layer-save-as";function o(e){var i;if(e.type==="imagery")return{isValid:!0};const{raster:r}=e,t=(r==null?void 0:r.datasetFormat)==="Function"?(i=r.primaryRasters)==null?void 0:i.rasters[0]:r;return{isValid:(t==null?void 0:t.datasetFormat)==="RasterTileServer"&&(t.tileType==="Raster"||t.tileType==="Map"),errorMessage:"imagery tile layer should be created from a tiled image service."}}function p(e){const r=e.layerJSON;return Promise.resolve(r&&Object.keys(r).length?r:null)}async function T(e,r){const{parsedUrl:t,title:i,fullExtent:s}=e;r.url=t.path,r.title||(r.title=i);try{r.extent=await n(s)}catch{r.extent=void 0}c(r,a.METADATA),e.type==="imagery-tile"&&u(r,a.TILED_IMAGERY)}async function X(e,r){const t=e.type==="imagery"?g:f;return l({layer:e,itemType:m,validateLayer:o,createItemData:p,errorNamePrefix:t},r)}async function Z(e,r,t){const i=e.type==="imagery"?v:d;return y({layer:e,itemType:m,validateLayer:o,createItemData:p,errorNamePrefix:i,newItem:r,setItemProperties:T},t)}export{X as save,Z as saveAs};
