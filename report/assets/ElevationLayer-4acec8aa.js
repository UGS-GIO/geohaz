import{U as u,v as f,_ as c}from"./request-a10d6950.js";import{e as a,c as g}from"./subclass-f7409b1b.js";import{s as w,a as b}from"./Error-21d1d076.js";import{e as V,s as m,z as T,p as D}from"./promiseUtils-1d963c7c.js";import{m as S}from"./MultiOriginJSONSupport-9bd581c6.js";import{y as l}from"./JSONSupport-acf2865c.js";import{R as L}from"./typedArrayUtil-2af43698.js";import{o as y}from"./Extent-2b4578b8.js";import{v as $}from"./HeightModelInfo-46c4a968.js";import{b as x}from"./Layer-668dff8a.js";import{p as k}from"./ArcGISCachedService-be50ac44.js";import{l as I}from"./ArcGISService-1a65aba0.js";import{u as E}from"./OperationalLayer-04352719.js";import{j as M}from"./PortalLayer-f8b97b56.js";import{d as N}from"./commonProperties-0c35c2c9.js";import{p as O}from"./workers-1be2b889.js";import"./time-0817624a.js";import"./SpatialReference-428523ee.js";import"./jsonMap-5ba4a9c2.js";import"./assets-6fd92e57.js";import"./cast-e7a2f9aa.js";import"./geometry-31b45acd.js";import"./Polyline-013cde1f.js";import"./aaBoundingRect-aef00841.js";import"./Axis-30be7e73.js";import"./mathUtils-19b6edfc.js";import"./typeUtils-3056a943.js";import"./Evented-b5127116.js";import"./Identifiable-1430bdc2.js";import"./Loadable-8a1ead8b.js";import"./Promise-ec74e14b.js";import"./TileInfo-d188b444.js";import"./TileInfoTilemapCache-f6b6c6df.js";import"./TilemapCache-a4744968.js";import"./ByteSizeUnit-d4757d40.js";import"./LRUCache-000d0e19.js";import"./reactiveUtils-e7d9f86e.js";import"./Collection-aa6ef54b.js";import"./SimpleObservable-ae589a25.js";import"./arcgisLayerUrl-0c479f71.js";import"./persistableUrlUtils-ca6bb38d.js";import"./layerUtils-c805b05c.js";import"./Portal-cb507469.js";import"./locale-bde6d0f6.js";import"./PortalItem-9d3416e3.js";import"./portalItemUtils-8aceb0b8.js";import"./projection-41da473c.js";import"./projectBuffer-af7b4ad9.js";import"./zscale-d7e12601.js";import"./TimeExtent-579f0e32.js";import"./timeUtils-24502426.js";import"./date-7940da18.js";import"./datetime-7e00d9ef.js";import"./ElevationInfo-e9f55e40.js";import"./fieldUtils-fcb2a714.js";import"./intl-fe039018.js";import"./messages-2d262041.js";import"./lengthUtils-1e9c410b.js";import"./opacityUtils-f0a081b4.js";import"./Connection-2d969448.js";class j{constructor(e,t,i,o){this._hasNoDataValues=null,this._minValue=null,this._maxValue=null,"pixelData"in e?(this.values=e.pixelData,this.width=e.width,this.height=e.height,this.noDataValue=e.noDataValue):(this.values=e,this.width=t,this.height=i,this.noDataValue=o)}get hasNoDataValues(){if(this._hasNoDataValues==null){const e=this.noDataValue;this._hasNoDataValues=this.values.includes(e)}return this._hasNoDataValues}get minValue(){return this._ensureBounds(),this._minValue}get maxValue(){return this._ensureBounds(),this._maxValue}_ensureBounds(){if(this._minValue!=null)return;const{noDataValue:e,values:t}=this;let i=1/0,o=-1/0,p=!0;for(const n of t)n===e?this._hasNoDataValues=!0:(i=n<i?n:i,o=n>o?n:o,p=!1);p?(this._minValue=0,this._maxValue=0):(this._minValue=i,this._maxValue=o>-3e38?o:0)}}class P{constructor(e,t,i,o,p={}){this._mainMethod=t,this._transferLists=i,this._listeners=[],this._promise=O(e,{...p,schedule:o}).then(n=>{if(this._thread===void 0){this._thread=n,this._promise=null,p.hasInitialize&&this.broadcast({},"initialize");for(const h of this._listeners)this._connectListener(h)}else n.close()}),this._promise.catch(n=>w.getLogger("esri.core.workers.WorkerHandle").error(`Failed to initialize ${e} worker: ${n}`))}on(e,t){const i={removed:!1,eventName:e,callback:t,threadHandle:null};return this._listeners.push(i),this._connectListener(i),V(()=>{i.removed=!0,L(this._listeners,i),this._thread&&i.threadHandle!=null&&i.threadHandle.remove()})}destroy(){this._thread&&(this._thread.close(),this._thread=null),this._promise=null,this._listeners.length=0,this._transferLists={}}invoke(e,t){return this.invokeMethod(this._mainMethod,e,t)}invokeMethod(e,t,i){if(this._thread){const o=this._transferLists[e],p=o?o(t):[];return this._thread.invoke(e,t,{transferList:p,signal:i})}return this._promise?this._promise.then(()=>(m(i),this.invokeMethod(e,t,i))):Promise.reject(null)}broadcast(e,t){return this._thread?Promise.all(this._thread.broadcast(t,e)).then(()=>{}):this._promise?this._promise.then(()=>this.broadcast(e,t)):Promise.reject()}get promise(){return this._promise}_connectListener(e){this._thread&&this._thread.on(e.eventName,e.callback).then(t=>{e.removed||(e.threadHandle=t)})}}class v extends P{constructor(e=null){super("LercWorker","_decode",{_decode:t=>[t.buffer]},e,{strategy:"dedicated"}),this.schedule=e,this.ref=0}decode(e,t,i){return e&&e.byteLength!==0?this.invoke({buffer:e,options:t},i):Promise.resolve(null)}release(){--this.ref<=0&&(d.forEach((e,t)=>{e===this&&d.delete(t)}),this.destroy())}}const d=new Map;function A(r=null){let e=d.get(r);return e||(r!=null?(e=new v(t=>r.immediate.schedule(t)),d.set(r,e)):(e=new v,d.set(null,e))),++e.ref,e}let s=class extends k(I(E(M(S(x))))){constructor(...r){super(...r),this.capabilities={operations:{supportsTileMap:!1}},this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=A()}normalizeCtorArgs(r,e){return typeof r=="string"?{url:r,...e}:r}destroy(){this._lercDecoder=T(this._lercDecoder)}readCapabilities(r,e){const t=e.capabilities&&e.capabilities.split(",").map(i=>i.toLowerCase().trim());return t?{operations:{supportsTileMap:t.includes("tilemap")}}:{operations:{supportsTileMap:!1}}}readVersion(r,e){let t=e.currentVersion;return t||(t=9.3),t}load(r){const e=r!=null?r.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:t=>{if(t.typeKeywords){for(let i=0;i<t.typeKeywords.length;i++)if(t.typeKeywords[i].toLowerCase()==="elevation 3d layer")return!0}throw new b("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},r).catch(D).then(()=>this._fetchImageService(e))),Promise.resolve(this)}fetchTile(r,e,t,i){const o=(i=i||{signal:null}).signal!=null?i.signal:i.signal=new AbortController().signal,p={responseType:"array-buffer",signal:o},n={noDataValue:i.noDataValue,returnFileInfo:!0};return this.load().then(()=>this._fetchTileAvailability(r,e,t,i)).then(()=>u(this.getTileUrl(r,e,t),p)).then(h=>this._lercDecoder.decode(h.data,n,o)).then(h=>new j(h))}getTileUrl(r,e,t){const i=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,o=f({...this.parsedUrl.query,blankTile:!i&&null});return`${this.parsedUrl.path}/tile/${r}/${e}/${t}${o?"?"+o:""}`}async queryElevation(r,e){const{ElevationQuery:t}=await c(()=>import("./ElevationQuery-49f146ad.js"),["./ElevationQuery-49f146ad.js","./Evented-b5127116.js","./subclass-f7409b1b.js","./typedArrayUtil-2af43698.js","./Error-21d1d076.js","./promiseUtils-1d963c7c.js","./JSONSupport-acf2865c.js","./time-0817624a.js","./SpatialReference-428523ee.js","./jsonMap-5ba4a9c2.js","./request-a10d6950.js","./assets-6fd92e57.js","./Polyline-013cde1f.js","./Extent-2b4578b8.js","./cast-e7a2f9aa.js","./aaBoundingRect-aef00841.js","./Axis-30be7e73.js","./mathUtils-19b6edfc.js","./projection-41da473c.js","./SimpleObservable-ae589a25.js","./projectBuffer-af7b4ad9.js","./zscale-d7e12601.js","./geometry-31b45acd.js","./typeUtils-3056a943.js","./TileInfo-d188b444.js"],import.meta.url);return m(e),new t().query(this,r,e)}async createElevationSampler(r,e){const{ElevationQuery:t}=await c(()=>import("./ElevationQuery-49f146ad.js"),["./ElevationQuery-49f146ad.js","./Evented-b5127116.js","./subclass-f7409b1b.js","./typedArrayUtil-2af43698.js","./Error-21d1d076.js","./promiseUtils-1d963c7c.js","./JSONSupport-acf2865c.js","./time-0817624a.js","./SpatialReference-428523ee.js","./jsonMap-5ba4a9c2.js","./request-a10d6950.js","./assets-6fd92e57.js","./Polyline-013cde1f.js","./Extent-2b4578b8.js","./cast-e7a2f9aa.js","./aaBoundingRect-aef00841.js","./Axis-30be7e73.js","./mathUtils-19b6edfc.js","./projection-41da473c.js","./SimpleObservable-ae589a25.js","./projectBuffer-af7b4ad9.js","./zscale-d7e12601.js","./geometry-31b45acd.js","./typeUtils-3056a943.js","./TileInfo-d188b444.js"],import.meta.url);return m(e),new t().createSampler(this,r,e)}_fetchTileAvailability(r,e,t,i){return this.tilemapCache?this.tilemapCache.fetchAvailability(r,e,t,i):Promise.resolve("unknown")}async _fetchImageService(r){var i;if(this.sourceJSON)return this.sourceJSON;const e={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:r},t=await u(this.parsedUrl.path,e);t.ssl&&(this.url=(i=this.url)==null?void 0:i.replace(/^http:/i,"https:")),this.sourceJSON=t.data,this.read(t.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile[_]}};a([l({readOnly:!0})],s.prototype,"capabilities",void 0),a([y("service","capabilities",["capabilities"])],s.prototype,"readCapabilities",null),a([l({json:{read:{source:"copyrightText"}}})],s.prototype,"copyright",void 0),a([l({readOnly:!0,type:$})],s.prototype,"heightModelInfo",void 0),a([l({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],s.prototype,"path",void 0),a([l({type:["show","hide"]})],s.prototype,"listMode",void 0),a([l({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],s.prototype,"minScale",void 0),a([l({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],s.prototype,"maxScale",void 0),a([l({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],s.prototype,"opacity",void 0),a([l({type:["ArcGISTiledElevationServiceLayer"]})],s.prototype,"operationalLayerType",void 0),a([l()],s.prototype,"sourceJSON",void 0),a([l({json:{read:!1},value:"elevation",readOnly:!0})],s.prototype,"type",void 0),a([l(N)],s.prototype,"url",void 0),a([l()],s.prototype,"version",void 0),a([y("version",["currentVersion"])],s.prototype,"readVersion",null),s=a([g("esri.layers.ElevationLayer")],s);const _=Symbol("default-fetch-tile");s.prototype.fetchTile[_]=!0;const Be=s;export{Be as default};
