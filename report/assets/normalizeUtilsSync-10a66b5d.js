import{g as b}from"./JSONSupport-acf2865c.js";import{u as A,h as X}from"./aaBoundingRect-aef00841.js";import{a as J}from"./Polyline-013cde1f.js";import{u as N,l as R,m as $,f as j,s as M}from"./jsonUtils-2c7f966c.js";import{r as T,s as q,i as p}from"./normalizeUtilsCommon-c4e9ddb1.js";import{s as z,w as B}from"./SpatialReference-428523ee.js";function Z(t){return k(t,!0)}function ii(t){return k(t,!1)}function k(t,i){if(t==null)return null;const n=t.spatialReference,s=z(n),e=b(t)?t.toJSON():t;if(!s)return e;const h=B(n)?102100:4326,o=T[h].maxX,x=T[h].minX;if(N(e))return S(e,o,x);if(R(e))return e.points=e.points.map(u=>S(u,o,x)),e;if($(e))return D(e,s);if(j(e)||M(e)){const u=J(F,e),r={xmin:u[0],ymin:u[1],xmax:u[2],ymax:u[3]},m=p(r.xmin,x)*(2*o),_=m===0?e:q(e,m);return r.xmin+=m,r.xmax+=m,r.xmax>o?L(_,o,i):r.xmin<x?L(_,x,i):_}return e}function D(t,i){if(!i)return t;const n=E(t,i).map(s=>s.extent);return n.length<2?n[0]||t:n.length>2?(t.xmin=i.valid[0],t.xmax=i.valid[1],t):{rings:n.map(s=>[[s.xmin,s.ymin],[s.xmin,s.ymax],[s.xmax,s.ymax],[s.xmax,s.ymin],[s.xmin,s.ymin]])}}function S(t,i,n){if(Array.isArray(t)){const s=t[0];if(s>i){const e=p(s,i);t[0]=s+e*(-2*i)}else if(s<n){const e=p(s,n);t[0]=s+e*(-2*n)}}else{const s=t.x;if(s>i){const e=p(s,i);t.x+=e*(-2*i)}else if(s<n){const e=p(s,n);t.x+=e*(-2*n)}}return t}function E(t,i){const n=[],{ymin:s,ymax:e,xmin:h,xmax:o}=t,x=t.xmax-t.xmin,[u,r]=i.valid,{x:m,frameId:_}=w(t.xmin,i),{x:a,frameId:c}=w(t.xmax,i),V=m===a&&x>0;if(x>2*r){const v={xmin:h<o?m:a,ymin:s,xmax:r,ymax:e},O={xmin:u,ymin:s,xmax:h<o?a:m,ymax:e},P={xmin:0,ymin:s,xmax:r,ymax:e},C={xmin:u,ymin:s,xmax:0,ymax:e},f=[],d=[];g(v,P)&&f.push(_),g(v,C)&&d.push(_),g(O,P)&&f.push(c),g(O,C)&&d.push(c);for(let y=_+1;y<c;y++)f.push(y),d.push(y);n.push(new l(v,[_]),new l(O,[c]),new l(P,f),new l(C,d))}else m>a||V?n.push(new l({xmin:m,ymin:s,xmax:r,ymax:e},[_]),new l({xmin:u,ymin:s,xmax:a,ymax:e},[c])):n.push(new l({xmin:m,ymin:s,xmax:a,ymax:e},[_]));return n}function w(t,i){const[n,s]=i.valid,e=2*s;let h,o=0;return t>s?(h=Math.ceil(Math.abs(t-s)/e),t-=h*e,o=h):t<n&&(h=Math.ceil(Math.abs(t-n)/e),t+=h*e,o=-h),{x:t,frameId:o}}function g(t,i){const{xmin:n,ymin:s,xmax:e,ymax:h}=i;return I(t,n,s)&&I(t,n,h)&&I(t,e,h)&&I(t,e,s)}function I(t,i,n){return i>=t.xmin&&i<=t.xmax&&n>=t.ymin&&n<=t.ymax}function L(t,i,n=!0){const s=!M(t);if(s&&X(t),n)return new G().cut(t,i);const e=s?t.rings:t.paths,h=s?4:2,o=e.length,x=-2*i;for(let u=0;u<o;u++){const r=e[u];if(r&&r.length>=h){const m=[];for(const _ of r)m.push([_[0]+x,_[1]]);e.push(m)}}return s?t.rings=e:t.paths=e,t}class l{constructor(i,n){this.extent=i,this.frameIds=n}}const F=A();class G{constructor(){this._linesIn=[],this._linesOut=[]}cut(i,n){let s;if(this._xCut=n,i.rings)this._closed=!0,s=i.rings,this._minPts=4;else{if(!i.paths)return null;this._closed=!1,s=i.paths,this._minPts=2}for(const h of s){if(!h||h.length<this._minPts)continue;let o=!0;for(const x of h)o?(this.moveTo(x),o=!1):this.lineTo(x);this._closed&&this.close()}this._pushLineIn(),this._pushLineOut(),s=[];for(const h of this._linesIn)h&&h.length>=this._minPts&&s.push(h);const e=-2*this._xCut;for(const h of this._linesOut)if(h&&h.length>=this._minPts){for(const o of h)o[0]+=e;s.push(h)}return this._closed?i.rings=s:i.paths=s,i}moveTo(i){this._pushLineIn(),this._pushLineOut(),this._prevSide=this._side(i[0]),this._moveTo(i[0],i[1],this._prevSide),this._prevPt=i,this._firstPt=i}lineTo(i){const n=this._side(i[0]);if(n*this._prevSide==-1){const s=this._intersect(this._prevPt,i);this._lineTo(this._xCut,s,0),this._prevSide=0,this._lineTo(i[0],i[1],n)}else this._lineTo(i[0],i[1],n);this._prevSide=n,this._prevPt=i}close(){const i=this._firstPt,n=this._prevPt;i[0]===n[0]&&i[1]===n[1]||this.lineTo(i),this._checkClosingPt(this._lineIn),this._checkClosingPt(this._lineOut)}_moveTo(i,n,s){this._closed?(this._lineIn.push([s<=0?i:this._xCut,n]),this._lineOut.push([s>=0?i:this._xCut,n])):(s<=0&&this._lineIn.push([i,n]),s>=0&&this._lineOut.push([i,n]))}_lineTo(i,n,s){this._closed?(this._addPolyVertex(this._lineIn,s<=0?i:this._xCut,n),this._addPolyVertex(this._lineOut,s>=0?i:this._xCut,n)):s<0?(this._prevSide===0&&this._pushLineOut(),this._lineIn.push([i,n])):s>0?(this._prevSide===0&&this._pushLineIn(),this._lineOut.push([i,n])):this._prevSide<0?(this._lineIn.push([i,n]),this._lineOut.push([i,n])):this._prevSide>0&&(this._lineOut.push([i,n]),this._lineIn.push([i,n]))}_addPolyVertex(i,n,s){const e=i.length;e>1&&i[e-1][0]===n&&i[e-2][0]===n?i[e-1][1]=s:i.push([n,s])}_checkClosingPt(i){const n=i.length;n>3&&i[0][0]===this._xCut&&i[n-2][0]===this._xCut&&i[1][0]===this._xCut&&(i[0][1]=i[n-2][1],i.pop())}_side(i){return i<this._xCut?-1:i>this._xCut?1:0}_intersect(i,n){const s=(this._xCut-i[0])/(n[0]-i[0]);return i[1]+s*(n[1]-i[1])}_pushLineIn(){this._lineIn&&this._lineIn.length>=this._minPts&&this._linesIn.push(this._lineIn),this._lineIn=[]}_pushLineOut(){this._lineOut&&this._lineOut.length>=this._minPts&&this._linesOut.push(this._lineOut),this._lineOut=[]}}export{ii as a,Z as p};
